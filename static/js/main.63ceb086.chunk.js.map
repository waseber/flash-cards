{"version":3,"sources":["components/NavBar.js","pages/HomePage.js","context/qa.js","pages/AddPage.js","components/carousel.js","pages/PlayPage.js","pages/EditPage.js","pages/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","count","PlayLink","to","exact","HomePage","React","createContext","qa","getCount","addQuestionAnswer","q","a","getQuestionsAnswers","getAQuestion","editQuestion","deleteQuestion","AddPage","useState","questionCount","setQuestionCount","questionText","setQuestionText","answerText","setAnswerText","Consumer","context","onSubmit","e","preventDefault","document","getElementsByTagName","reset","id","cols","rows","onChange","target","value","type","Carousel","obj","console","log","showAnswer","setShowAnswer","currentIndex","setCurrentIndex","length","currentQuestion","setCurrentQuestion","currentAnswer","setCurrentAnswer","flipCard","href","onClick","className","icon","faChevronLeft","faEdit","faChevronRight","PlayPage","EditPage","match","status","setStatus","params","key","defaultValue","window","confirm","alert","faTrashAlt","NotFoundPage","questionsObj","localStorage","getItem","JSON","parse","updateDB","db","setItem","stringify","App","state","push","splice","Provider","this","basename","process","path","component","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","ReactGA","initialize","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63ceb086.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst NavBar = (count) => {\r\n    let PlayLink\r\n    if(count.count>0){\r\n        PlayLink = <span> | <NavLink to=\"/play\">Play</NavLink></span>\r\n    }\r\n    return(\r\n        <nav>\r\n            <NavLink exact to=\"/\">Home</NavLink> | <NavLink to=\"/add-question\">Add</NavLink>{PlayLink}\r\n        </nav>\r\n    )};\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n    return(\r\n        <>\r\n            <h1>Make Your Own Flash Cards!</h1>\r\n            <p>Make it what you want. <br/>Whatever you need to study for, add questions and answers and then quiz yourself or friends and family!</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\n//const qaMap = new Map();\r\nexport default React.createContext({\r\n    qa:{},\r\n    getCount: ()=>{},\r\n    addQuestionAnswer: (q,a) =>{},\r\n    getQuestionsAnswers: () => {},\r\n    getAQuestion: ()=>{},\r\n    editQuestion: ()=>{},\r\n    deleteQuestion: ()=>{}\r\n\r\n});\r\n\r\n\r\n/*\r\nconst getSize = () => {\r\n    return qaMap.size;\r\n}\r\n\r\nconst getFromMap = (map) => {\r\n    for(let[k,v] of map){\r\n        console.log(`${k} ${v}`)\r\n    }\r\n}\r\n\r\nconst addToMap = (q, a) => {\r\n    //check if question exists already\r\n    if(qaMap.has(q)) return;\r\n    //question will be the key\r\n    qaMap.set(q, a);\r\n}\r\n*/","import React, {useState} from 'react';\r\nimport QaContext from '../context/qa';\r\n\r\nconst AddPage = () => {\r\n    const [questionCount, setQuestionCount] = useState(0); \r\n    const [questionText, setQuestionText] = useState(\"\");\r\n    const [answerText, setAnswerText] = useState(\"\");\r\n    \r\n\r\n    \r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>{\r\n                setQuestionCount(context.getCount())\r\n                const addQuestion = (e) => {\r\n                    e.preventDefault();\r\n                    //check if question exists already\r\n                    context.addQuestionAnswer(questionText, answerText);\r\n                    setQuestionCount(context.getCount())\r\n                    document.getElementsByTagName('form')[0].reset();\r\n                }\r\n                return (\r\n                    \r\n                    <>\r\n                        <p>There are currently {questionCount} questions</p>\r\n                        <form onSubmit={addQuestion}>\r\n                        <label>\r\n                            Question:\r\n                            <textarea id=\"question-field\" cols=\"50\" rows=\"3\" onChange={e => setQuestionText(e.target.value)}></textarea>\r\n                        </label>\r\n                        <label>\r\n                            Answer:\r\n                            <input id=\"answer-field\" type=\"text\" onChange={e => setAnswerText(e.target.value)} />\r\n                        </label>\r\n\r\n                        <button type=\"submit\">Add</button>\r\n                        </form>\r\n                    </>\r\n                )}\r\n            }\r\n        </QaContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default AddPage;","import React, {useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronRight, faChevronLeft, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Carousel = ({obj}) => {\r\n    console.log(obj)   \r\n    const [showAnswer, setShowAnswer] = useState(false);\r\n    let [currentIndex, setCurrentIndex] = useState(0);\r\n   //let currentIndex= 0;\r\n    const count = obj.length;\r\n    let [currentQuestion, setCurrentQuestion] = useState(obj[currentIndex].q);\r\n    let [currentAnswer, setCurrentAnswer] = useState(obj[currentIndex].a);\r\n    const flipCard = (e) => {\r\n        e.preventDefault();\r\n        setShowAnswer(!showAnswer);\r\n        console.log(\"click\")\r\n        //clone flash-card\r\n        /*const itm = document.getElementById(\"flash-card\");\r\n        const cln = itm.cloneNode(true);\r\n        //append the new one to carousel-center\r\n        document.getElementById(\"carousel-center\").appendChild(cln);\r\n        //delete the old one\r\n        document.getElementById(\"carousel-center\").removeChild(itm);\r\n\r\n        \r\n        if(showAnswer!=true){\r\n            document.getElementById(\"flash-card\").classList.add(\"ani-flip-up\");\r\n        } else {\r\n            document.getElementById(\"flash-card\").classList.add(\"ani-flip-down\");\r\n        }*/\r\n    }\r\n    const prev = (e) => {\r\n        e.preventDefault();\r\n        if(currentIndex +1 > 1){\r\n            setCurrentIndex(currentIndex-=1)\r\n            setCurrentQuestion(obj[currentIndex].q)\r\n            setCurrentAnswer(obj[currentIndex].a)\r\n            setShowAnswer(false);\r\n        }\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        if(currentIndex < count){\r\n            setCurrentIndex(currentIndex+=1);\r\n            setCurrentQuestion(obj[currentIndex].q)\r\n            setCurrentAnswer(obj[currentIndex].a)\r\n            setShowAnswer(false);\r\n        }\r\n        \r\n    }\r\n\r\n    return(            \r\n            <>\r\n            <h2>{currentIndex + 1} of {obj.length}</h2>\r\n            <section>\r\n                \r\n                <a href=\"#\"\r\n                    onClick={prev}\r\n                    className={\r\n                        (currentIndex +1 > 1) ? \"paddle\" : \"paddle vis-hidden\"\r\n                    }\r\n                    ><FontAwesomeIcon icon={faChevronLeft} /></a>\r\n                <div id=\"carousel-center\">\r\n                    <article id=\"flash-card\" className=\"flash-card\" >\r\n                        \r\n                        <a href=\"#\" \r\n                            onClick={flipCard}\r\n                            className={\r\n                                (!showAnswer) ? \"question ani-flip-up\": \"hide\"\r\n                        }>\r\n                            <div className=\"inner-card\">\r\n                            <h2>Question:</h2>\r\n                            <h3 >{currentQuestion}</h3>\r\n                            </div>\r\n                        </a>\r\n                        <a href=\"#\" \r\n                            onClick={flipCard}\r\n                            className={\r\n                                (showAnswer) ? \"answer  ani-flip-down\": \"hide\"\r\n                            }> \r\n                                <div className=\"inner-card\">\r\n                                <h2>Answer:</h2>\r\n                            <h3 >{currentAnswer}</h3>\r\n                        </div></a>\r\n                    </article>\r\n                    <Link to={`/edit/${currentIndex}`}><FontAwesomeIcon icon={faEdit} /></Link>\r\n                </div>\r\n                \r\n                <a href=\"#\" \r\n                    onClick={next}\r\n                    className={\r\n                        (currentIndex +1 == count) ? \"paddle vis-hidden\" : \"paddle\"\r\n                    }\r\n                    ><FontAwesomeIcon icon={faChevronRight} /></a>\r\n            </section>\r\n            </>\r\n        //))\r\n    \r\n       \r\n    )\r\n}\r\n\r\nexport default Carousel;","import React from 'react';\r\nimport Carousel from '../components/carousel';\r\nimport QaContext from '../context/qa';\r\n\r\nconst PlayPage = () => {\r\n\r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>(<>\r\n                <Carousel obj={context.getQuestionsAnswers()}/>\r\n                \r\n            </>)}\r\n        </QaContext.Consumer>\r\n    );\r\n}\r\n\r\n\r\nexport default PlayPage;","import React, {useState} from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport QaContext from '../context/qa';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst EditPage = ({match}) => {\r\n    let [questionText, setQuestionText] = useState();\r\n    let [answerText, setAnswerText] = useState();\r\n    let [status, setStatus] = useState();\r\n\r\n    \r\n    const id = match.params.id;\r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>{\r\n                const editQuestion = (e) => {\r\n                    e.preventDefault();\r\n                    //check if question exists already\r\n                    context.editQuestion(id, questionText, answerText);\r\n                    //document.getElementsByTagName('form')[0].reset();\r\n                    setStatus(\"Successfully updated\");\r\n                }\r\n\r\n                const deleteQuestion = (e) => {\r\n                    e.preventDefault();\r\n                    //confirm deletion\r\n                    let r = window.confirm(\"Are you sure you want to delete this question?\");\r\n                    if (r == true) {\r\n                        context.deleteQuestion(id);\r\n                        alert(\"Deleted\");\r\n                        return <Redirect to=\"/play\" />\r\n                    }                    \r\n\r\n                }\r\n\r\n                return (<>\r\n                <h2>Edit Your Question</h2>\r\n                <form onSubmit={editQuestion} key={id}>\r\n                        <label>\r\n                            Question:\r\n                            <textarea \r\n                                id=\"question-field\" \r\n                                cols=\"50\" \r\n                                rows=\"3\" \r\n                                onChange={e => setQuestionText(e.target.value)}\r\n                                defaultValue={context.getAQuestion(id).q}></textarea>\r\n                        </label>\r\n                        <label>\r\n                            Answer:\r\n                            <input \r\n                                id=\"answer-field\" \r\n                                type=\"text\" \r\n                                onChange={e => setAnswerText(e.target.value)} \r\n                                defaultValue={context.getAQuestion(id).a}/>\r\n                        </label>\r\n\r\n                        <button type=\"submit\">Edit</button>\r\n                        <a href=\"#\" onClick={deleteQuestion}><FontAwesomeIcon icon={faTrashAlt} /></a>\r\n                        <p>{status}</p>\r\n                        </form>\r\n            </>)}}\r\n        </QaContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default EditPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React, { Component, useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch} from 'react-router-dom';\r\nimport NavBar from './components/NavBar';\r\nimport HomePage from './pages/HomePage';\r\nimport AddPage from './pages/AddPage';\r\nimport QaContext from './context/qa';\r\nimport './App.css';\r\nimport PlayPage from './pages/PlayPage';\r\nimport EditPage from './pages/EditPage';\r\nimport NotFoundPage from './pages/NotFoundPage';\r\n\r\n\r\nlet questionsObj = [];\r\nif(localStorage.getItem(\"questions\")){\r\n  questionsObj = JSON.parse(localStorage.getItem(\"questions\"))\r\n}\r\n\r\nconst updateDB = (db, obj) => {\r\n  localStorage.setItem(db, JSON.stringify(obj))\r\n}\r\n\r\n//const qaMap = new Map();\r\nclass App extends Component {\r\n \r\n  state = {\r\n    qa: questionsObj,\r\n  };\r\n  getCount = () => {\r\n    return questionsObj.length;\r\n  };\r\n  addQuestionAnswer = (q,a) =>{\r\n    questionsObj.push({ q , a})\r\n    updateDB(\"questions\", questionsObj);    \r\n  };\r\n  getQuestionsAnswers = () => {\r\n    return questionsObj;\r\n  };\r\n  getAQuestion = (id) => {\r\n    console.log(questionsObj[id])\r\n    return questionsObj[id];\r\n  };\r\n  editQuestion = (id,q,a) =>{\r\n    questionsObj[id] = { q , a};\r\n    updateDB(\"questions\", questionsObj);\r\n  }\r\n  deleteQuestion = (id) => {\r\n    questionsObj.splice(id,1);\r\n    updateDB(\"questions\", questionsObj);\r\n  };\r\n\r\n  render(){\r\n    \r\n  return (\r\n    <div className=\"App\">\r\n      <QaContext.Provider\r\n        value={{\r\n          qa: this.state.qa,\r\n          getCount: this.getCount,\r\n          addQuestionAnswer: this.addQuestionAnswer,\r\n          getQuestionsAnswers: this.getQuestionsAnswers,\r\n          getAQuestion: this.getAQuestion,\r\n          editQuestion: this.editQuestion,\r\n          deleteQuestion: this.deleteQuestion\r\n        }}\r\n      >\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n        <header className=\"App-header\">\r\n          <NavBar count={this.getCount()} />\r\n        </header>\r\n        <main>\r\n            <Switch>\r\n              <Route path=\"/\" exact component={HomePage} />\r\n              <Route \r\n                path=\"/add-question\" \r\n                component={AddPage}\r\n                />\r\n                <Route \r\n                path=\"/play\"\r\n                component={PlayPage}\r\n                //render={(props) => <AddPage {...props} InUp=\"in\"/>}\r\n                />\r\n                <Route \r\n                path=\"/edit/:id\" \r\n                component={EditPage}\r\n                />\r\n                \r\n                <Route \r\n                component={NotFoundPage} \r\n                />\r\n            </Switch>\r\n        </main>\r\n        </Router>\r\n      </QaContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        console.log(\"localhost\")\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nReactGA.initialize('UA-180626419-1');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}