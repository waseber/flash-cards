{"version":3,"sources":["components/NavBar.js","context/qa.js","pages/HomePage.js","pages/AddPage.js","components/carousel.js","components/toc.js","pages/PlayPage.js","pages/EditPage.js","pages/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","count","PlayLink","console","log","to","exact","React","createContext","qa","getCount","addQuestionAnswer","q","a","getQuestionsAnswers","setIndex","getAQuestion","editQuestion","deleteQuestion","HomePage","Consumer","context","className","AddPage","useState","questionCount","setQuestionCount","questionText","setQuestionText","answerText","setAnswerText","onSubmit","e","preventDefault","document","getElementsByTagName","reset","id","cols","rows","onChange","target","value","type","autoComplete","Carousel","onChangeQuestion","obj","index","showAnswer","setShowAnswer","currentIndex","setCurrentIndex","displayIndex","setDisplayIndex","currentQuestion","setCurrentQuestion","currentAnswer","setCurrentAnswer","useEffect","parseInt","length","flipCard","href","onClick","data","icon","faChevronLeft","faEdit","faChevronRight","ToC","onQuestionClicked","showMenu","setShowMenu","toggleMenu","faBars","map","v","i","key","PlayPage","questionIndex","setQuestionIndex","changeQuestion","currentTarget","getAttribute","withRouter","match","props","status","setStatus","params","defaultValue","window","confirm","alert","location","faTrashAlt","NotFoundPage","questionsObj","localStorage","getItem","JSON","parse","updateDB","db","setItem","stringify","ReactGa","initialize","pageview","App","state","push","splice","Provider","this","basename","process","path","component","EditPage","Component","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b959d2d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst NavBar = (count) => {\r\n    console.log(\"count \", count)\r\n    let PlayLink\r\n    if(count.count>0){\r\n        PlayLink = <span> | <NavLink to=\"/play\">Play</NavLink></span>\r\n    }\r\n    return(\r\n        <nav>\r\n            <NavLink exact to=\"/\">Home</NavLink> | <NavLink to=\"/add-question\">Add</NavLink>{PlayLink}\r\n        </nav>\r\n    )};\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\n//const qaMap = new Map();\r\nexport default React.createContext({\r\n    qa:{},\r\n    getCount: ()=>{},\r\n    addQuestionAnswer: (q,a) =>{},\r\n    getQuestionsAnswers: () => {},\r\n    setIndex:() =>{},\r\n    getAQuestion: ()=>{},\r\n    editQuestion: ()=>{},\r\n    deleteQuestion: ()=>{}\r\n\r\n});\r\n\r\n\r\n/*\r\nconst getSize = () => {\r\n    return qaMap.size;\r\n}\r\n\r\nconst getFromMap = (map) => {\r\n    for(let[k,v] of map){\r\n        console.log(`${k} ${v}`)\r\n    }\r\n}\r\n\r\nconst addToMap = (q, a) => {\r\n    //check if question exists already\r\n    if(qaMap.has(q)) return;\r\n    //question will be the key\r\n    qaMap.set(q, a);\r\n}\r\n*/","import React from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport QaContext from '../context/qa';\r\n\r\nconst HomePage = () => {\r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>(<>\r\n            <header className=\"App-header\">\r\n                <NavBar count={context.getCount()} />\r\n            </header>\r\n            <h2>Make Your Own</h2>\r\n            <h1>Flash Cards</h1>\r\n            <p>Make it what you want. <br/>Whatever you need to study for, add questions and answers and then quiz yourself or friends and family!</p>\r\n        </>)}\r\n        </QaContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React, {useState} from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport QaContext from '../context/qa';\r\n\r\nconst AddPage = () => {\r\n    const [questionCount, setQuestionCount] = useState(0); \r\n    const [questionText, setQuestionText] = useState(\"\");\r\n    const [answerText, setAnswerText] = useState(\"\");\r\n    \r\n\r\n    \r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>{\r\n                setQuestionCount(context.getCount())\r\n                const addQuestion = (e) => {\r\n                    e.preventDefault();\r\n                    //check if question exists already\r\n                    context.addQuestionAnswer(questionText, answerText);\r\n                    setQuestionCount(context.getCount())\r\n                    document.getElementsByTagName('form')[0].reset();\r\n                }\r\n                return (\r\n                    \r\n                    <>\r\n                        <header className=\"App-header\">\r\n                            <NavBar count={questionCount} />\r\n                        </header>\r\n                        <p>There are currently {questionCount} questions</p>\r\n                        <form onSubmit={addQuestion}>\r\n                        <label>\r\n                            Question:\r\n                            <textarea id=\"question-field\" cols=\"50\" rows=\"3\" onChange={e => setQuestionText(e.target.value)}></textarea>\r\n                        </label>\r\n                        <label>\r\n                            Answer:\r\n                            <input id=\"answer-field\" type=\"text\" autoComplete=\"off\" onChange={e => setAnswerText(e.target.value)} />\r\n                        </label>\r\n\r\n                        <button type=\"submit\">Add</button>\r\n                        </form>\r\n                    </>\r\n                )}\r\n            }\r\n        </QaContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default AddPage;","import React, {useEffect, useState} from 'react';\r\nimport QaContext from '../context/qa';\r\nimport {Link} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronRight, faChevronLeft, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Carousel = ({onChangeQuestion, obj, index}) => {\r\n    const [showAnswer, setShowAnswer] = useState(false);\r\n    let [currentIndex, setCurrentIndex] = useState(index);\r\n    let [displayIndex, setDisplayIndex] = useState(1);\r\n    let [currentQuestion, setCurrentQuestion] = useState(obj[currentIndex].q);\r\n    let [currentAnswer, setCurrentAnswer] = useState(obj[currentIndex].a);\r\n    useEffect(()=>{\r\n        setCurrentIndex(index);\r\n        setCurrentQuestion(obj[currentIndex].q)\r\n        setCurrentAnswer(obj[currentIndex].a)\r\n        setShowAnswer(false);\r\n        setDisplayIndex(parseInt(currentIndex) + 1)\r\n    })\r\n\r\n    return(            \r\n        <QaContext.Consumer>\r\n        {context =>{ \r\n                \r\n               //let currentIndex= 0;\r\n                const count = obj.length;\r\n                \r\n                const flipCard = (e) => {\r\n                    e.preventDefault();\r\n                    setShowAnswer(!showAnswer);\r\n                    //clone flash-card\r\n                    /*const itm = document.getElementById(\"flash-card\");\r\n                    const cln = itm.cloneNode(true);\r\n                    //append the new one to carousel-center\r\n                    document.getElementById(\"carousel-center\").appendChild(cln);\r\n                    //delete the old one\r\n                    document.getElementById(\"carousel-center\").removeChild(itm);\r\n            \r\n                    \r\n                    if(showAnswer!=true){\r\n                        document.getElementById(\"flash-card\").classList.add(\"ani-flip-up\");\r\n                    } else {\r\n                        document.getElementById(\"flash-card\").classList.add(\"ani-flip-down\");\r\n                    }*/\r\n                }\r\n                \r\n            return (<>\r\n            <h3>{displayIndex} of {obj.length}</h3>\r\n            <section>                \r\n                <a href=\"#\"\r\n                    onClick={onChangeQuestion}\r\n                    data={parseInt(currentIndex)-1}\r\n                    className={\r\n                        (displayIndex > 1) ? \"paddle\" : \"paddle vis-hidden\"\r\n                    }\r\n                    ><FontAwesomeIcon icon={faChevronLeft} /></a>\r\n                <div id=\"carousel-center\">\r\n                    <article id=\"flash-card\" className=\"flash-card\" >\r\n                        \r\n                        <a href=\"#\" \r\n                            onClick={flipCard}\r\n                            className={\r\n                                (!showAnswer) ? \"question ani-flip-up\": \"hide\"\r\n                        }>\r\n                            <div className=\"inner-card\">\r\n                            <h3>Question:</h3>\r\n                            <h3 >{currentQuestion}</h3>\r\n                            </div>\r\n                        </a>\r\n                        <a href=\"#\" \r\n                            onClick={flipCard}\r\n                            className={\r\n                                (showAnswer) ? \"answer  ani-flip-down\": \"hide\"\r\n                            }> \r\n                                <div className=\"inner-card\">\r\n                                <h3>Answer:</h3>\r\n                            <h3 >{currentAnswer}</h3>\r\n                        </div></a>\r\n                    </article>\r\n                    <Link to={`/edit/${currentIndex}`}><FontAwesomeIcon icon={faEdit} /></Link>\r\n                </div>\r\n                \r\n                <a href=\"#\" \r\n                    onClick={onChangeQuestion}\r\n                    data={parseInt(currentIndex)+1}\r\n                    className={\r\n                        (displayIndex == count) ? \"paddle vis-hidden\" : \"paddle\"\r\n                    }\r\n                    ><FontAwesomeIcon icon={faChevronRight} /></a>\r\n            </section>\r\n            </>)}}\r\n        </QaContext.Consumer>\r\n        //))\r\n    \r\n       \r\n    )\r\n}\r\n\r\nexport default Carousel;","import React, {useState} from 'react';\r\nimport QaContext from '../context/qa';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ToC = ({onQuestionClicked, data}) => {\r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const toggleMenu = (e) =>{\r\n        e.preventDefault();\r\n        setShowMenu(!showMenu);\r\n    }\r\n    return(\r\n                    \r\n        <QaContext.Consumer>\r\n        {context =>{ \r\n\r\n            /*const changeQuestion = (e) => {\r\n                e.preventDefault();\r\n                context.setIndex(selectedIndex);\r\n            }*/\r\n            return(<>\r\n        <a href=\"#\" className=\"toc-link\" onClick={toggleMenu}><FontAwesomeIcon icon={faBars} /></a>\r\n        <div \r\n            className={(showMenu)? \"toc-component in\": \"toc-component\"}>\r\n            <ul>\r\n            {data.map( (v, i) =>\r\n                <li key={i}><a href=\"#\" className=\"toc-item\" onClick={onQuestionClicked} data={i}>{v.q}</a></li>\r\n            )}\r\n            </ul>\r\n        </div>\r\n        </>)}}\r\n        </QaContext.Consumer>\r\n    )\r\n}\r\n\r\n\r\nexport default ToC;","import React, {useState} from 'react';\r\nimport Carousel from '../components/carousel';\r\nimport QaContext from '../context/qa';\r\nimport NavBar from '../components/NavBar';\r\nimport ToC from '../components/toc';\r\n\r\nconst PlayPage = () => {\r\n    let [questionIndex, setQuestionIndex] = useState(0);//index\r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>{ \r\n                function changeQuestion(e){\r\n                    e.preventDefault();\r\n                    setQuestionIndex(e.currentTarget.getAttribute('data'))\r\n                    console.log(e.currentTarget)\r\n                }\r\n                \r\n                return(<div className=\"play-page\">\r\n                <header className=\"App-header\">\r\n                    <NavBar count={context.getCount()} />\r\n                </header>\r\n                <ToC data={context.getQuestionsAnswers()} onQuestionClicked={changeQuestion} />\r\n                <Carousel obj={context.getQuestionsAnswers()} index={questionIndex} onChangeQuestion={changeQuestion}/>\r\n                \r\n            </div>)}}\r\n        </QaContext.Consumer>\r\n    );\r\n}\r\n\r\n\r\nexport default PlayPage;","import React, {useState} from 'react';\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport NavBar from '../components/NavBar';\r\nimport QaContext from '../context/qa';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst EditPage = ({match, props}) => {\r\n    let [questionText, setQuestionText] = useState();\r\n    let [answerText, setAnswerText] = useState();\r\n    let [status, setStatus] = useState();\r\n\r\n    \r\n    const id = match.params.id;\r\n    return(\r\n        <QaContext.Consumer>\r\n            {context =>{\r\n                const editQuestion = (e) => {\r\n                    e.preventDefault();\r\n                    //check if question exists already\r\n                    context.editQuestion(id, questionText, answerText);\r\n                    //document.getElementsByTagName('form')[0].reset();\r\n                    setStatus(\"Successfully updated\");\r\n                }\r\n\r\n                const deleteQuestion = (e) => {\r\n                    e.preventDefault();\r\n                    //confirm deletion\r\n                    let r = window.confirm(\"Are you sure you want to delete this question?\");\r\n                    if (r == true) {\r\n                        context.deleteQuestion(id);\r\n                        alert(\"Deleted\");\r\n                        window.location.href= \"/flash-cards/play\";\r\n                    }                    \r\n\r\n                }\r\n\r\n                return (<>\r\n                    <header className=\"App-header\">\r\n                        <NavBar count={context.getCount()} />\r\n                    </header>\r\n                <h2>Edit Your Question</h2>\r\n                <form onSubmit={editQuestion} key={id}>\r\n                        <label>\r\n                            Question:\r\n                            <textarea \r\n                                id=\"question-field\" \r\n                                cols=\"50\" \r\n                                rows=\"3\" \r\n                                onChange={e => setQuestionText(e.target.value)}\r\n                                defaultValue={context.getAQuestion(id).q}></textarea>\r\n                        </label>\r\n                        <label>\r\n                            Answer:\r\n                            <input \r\n                                id=\"answer-field\" \r\n                                type=\"text\" \r\n                                autoComplete=\"off\"\r\n                                onChange={e => setAnswerText(e.target.value)} \r\n                                defaultValue={context.getAQuestion(id).a}/>\r\n                        </label>\r\n\r\n                        <button type=\"submit\">Edit</button>\r\n                        <a href=\"#\" onClick={deleteQuestion}><FontAwesomeIcon icon={faTrashAlt} /></a>\r\n                        <p>{status}</p>\r\n                        </form>\r\n            </>)}}\r\n        </QaContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default withRouter(EditPage);","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React, { Component, useState } from 'react';\r\nimport {\r\n  HashRouter  as Router,\r\n  Route,\r\n  Switch} from 'react-router-dom';\r\nimport ReactGa from 'react-ga';\r\nimport HomePage from './pages/HomePage';\r\nimport AddPage from './pages/AddPage';\r\nimport QaContext from './context/qa';\r\nimport './App.css';\r\nimport PlayPage from './pages/PlayPage';\r\nimport EditPage from './pages/EditPage';\r\nimport NotFoundPage from './pages/NotFoundPage';\r\n\r\n\r\nlet questionsObj = [];\r\nif(localStorage.getItem(\"questions\")){\r\n  questionsObj = JSON.parse(localStorage.getItem(\"questions\"))\r\n}\r\n\r\nconst updateDB = (db, obj) => {\r\n  localStorage.setItem(db, JSON.stringify(obj))\r\n}\r\n\r\n\r\nReactGa.initialize('UA-180626419-1');\r\n\r\nReactGa.pageview('/')\r\n//const qaMap = new Map();\r\nclass App extends Component {\r\n\r\n  \r\n \r\n  state = {\r\n    qa: questionsObj,\r\n  };\r\n  getCount = () => {\r\n    return questionsObj.length;\r\n  };\r\n  addQuestionAnswer = (q,a) =>{\r\n    questionsObj.push({ q , a})\r\n    updateDB(\"questions\", questionsObj);    \r\n  };\r\n  getQuestionsAnswers = () => {\r\n    return questionsObj;\r\n  };\r\n  setIndex = (index = 0) => {\r\n    console.log(index)\r\n    return(index)};\r\n  getAQuestion = (id) => {\r\n    return questionsObj[id];\r\n  };\r\n  editQuestion = (id,q,a) =>{\r\n    questionsObj[id] = { q , a};\r\n    updateDB(\"questions\", questionsObj);\r\n  }\r\n  deleteQuestion = (id) => {\r\n    questionsObj.splice(id,1);\r\n    updateDB(\"questions\", questionsObj);\r\n  };\r\n\r\n  render(){\r\n    \r\n  return (\r\n    <div className=\"App\">\r\n      <QaContext.Provider\r\n        value={{\r\n          qa: this.state.qa,\r\n          getCount: this.getCount,\r\n          addQuestionAnswer: this.addQuestionAnswer,\r\n          getQuestionsAnswers: this.getQuestionsAnswers,\r\n          setIndex: this.setIndex,\r\n          getAQuestion: this.getAQuestion,\r\n          editQuestion: this.editQuestion,\r\n          deleteQuestion: this.deleteQuestion\r\n        }}\r\n      >\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n        <main>\r\n            <Switch>\r\n              <Route path=\"/\" exact component={HomePage} />\r\n              <Route \r\n                path=\"/add-question\" \r\n                component={AddPage}\r\n                />\r\n                <Route \r\n                path=\"/play\"\r\n                component={PlayPage}\r\n                //render={(props) => <AddPage {...props} InUp=\"in\"/>}\r\n                />\r\n                <Route \r\n                path=\"/edit/:id\" \r\n                component={EditPage}\r\n                />\r\n                \r\n                <Route \r\n                component={NotFoundPage} \r\n                />\r\n            </Switch>\r\n        </main>\r\n        </Router>\r\n      </QaContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        console.log(\"localhost\")\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}